### System: S->C
Extract key programming concepts from the provided Dafny code snippet. Focus on Dafny-specific concepts and formal verification principles, including:
- Verification constructs (requires, ensures, invariants)
- Specification patterns
- Data structures and algorithms
- Proof techniques and methodologies
List these concepts in a comma-separated format.

### System: C->I
Create a series of independent Dafny programming tasks that are original, distinct, diverse, and verification-focused. Each task must adhere to specified properties:

- category: the type of task (method implementation, function implementation, class implementation, or program implementation)
- language: Dafny
- difficulty: the complexity level (easy, medium, or hard)
- concepts: fundamental verification principles and techniques required for the solution

Design tasks that naturally incorporate formal verification concepts without explicitly stating which verification features to use. Tasks should encourage logical thinking and formal reasoning.

### System: I->R
You are an extremely intelligent AI coding assistant specializing in Dafny program generation. Your task is to create verified Dafny programs that:
1. Are fully verifiable by the Dafny verifier
2. Include comprehensive specifications (requires, ensures, invariants)
3. Demonstrate proper use of ghost variables, lemmas, and proof techniques
4. Contain clear documentation and explanatory comments
5. Follow Dafny best practices and verification patterns

Please provide accurate and reliable implementations that satisfy all verification conditions.


### Example 1
[Code]
method BinarySearch(a: array<int>, key: int) returns (index: int)
    requires a != null && forall i,j :: 0 <= i < j < a.Length ==> a[i] <= a[j]
    ensures -1 <= index < a.Length
    ensures index >= 0 ==> a[index] == key
    ensures index == -1 ==> forall i :: 0 <= i < a.Length ==> a[i] != key
{
    var low, high := 0, a.Length;
    while low < high
        invariant 0 <= low <= high <= a.Length
        invariant forall i :: 0 <= i < low ==> a[i] < key
        invariant forall i :: high <= i < a.Length ==> key < a[i]
    {
        var mid := low + (high - low) / 2;
        if a[mid] < key {
            low := mid + 1;
        } else if a[mid] > key {
            high := mid;
        } else {
            return mid;
        }
    }
    return -1;
}

[Property]
category: method implementation
language: Dafny
difficulty: medium
concepts: binary search algorithm, array manipulation, loop invariants, method specification, preconditions and postconditions, quantifiers

[Instruction]
Implement a binary search method in Dafny that searches for a key in a sorted array. The method should return the index of the key if found, or -1 if not found. Include proper specifications (requires and ensures clauses) and loop invariants to prove the correctness of the implementation.

[Response]
Let's implement a verified binary search method in Dafny with comprehensive specifications and proofs:

```dafny
method BinarySearch(a: array<int>, key: int) returns (index: int)
    // Array must be non-null and sorted in ascending order
    requires a != null && forall i,j :: 0 <= i < j < a.Length ==> a[i] <= a[j]
    // Return value is either -1 or a valid array index
    ensures -1 <= index < a.Length
    // If key is found, a[index] equals key
    ensures index >= 0 ==> a[index] == key
    // If key is not found (index == -1), key is not in the array
    ensures index == -1 ==> forall i :: 0 <= i < a.Length ==> a[i] != key
{
    // Initialize search boundaries
    var low, high := 0, a.Length;
    
    while low < high
        // Loop invariant to maintain array bounds
        invariant 0 <= low <= high <= a.Length
        // Elements before low are smaller than key
        invariant forall i :: 0 <= i < low ==> a[i] < key
        // Elements from high onwards are larger than key
        invariant forall i :: high <= i < a.Length ==> key < a[i]
    {
        var mid := low + (high - low) / 2;  // Prevent integer overflow
        
        if a[mid] < key {
            low := mid + 1;
        } else if a[mid] > key {
            high := mid;
        } else {
            return mid;  // Key found
        }
    }
    return -1;  // Key not found
}
```
